
FROM zed-gl-base

ARG ROS_DISTRO_ARG

ENV LOGNAME root
ENV ROS_DISTRO ${ROS_DISTRO_ARG}
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8


# ros apt key cause for some reason pipes dont work
RUN bash -c "$(curl -s https://gist.githubusercontent.com/Reschivon/4111c1c5942acf42feacde7fa301402b/raw/ae2e1fee2853aa669efaf5944ce2d025d178c180/get-ros-key.sh)"

# Setup ROS
RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata && \
    DEBIAN_FRONTEND=noninteractive apt-get install ros-$ROS_DISTRO-ros-base python3-rosinstall python3-rosdep python3-rosinstall-generator python3-wstool build-essential nano \
    cmake usbutils git -y --allow-unauthenticated && \
    rm -rf /var/lib/apt/lists/*

# setup zed ros env
ENV ROS_WS /opt/zed_ros_ws

RUN rosdep init && \
    rosdep update --rosdistro $ROS_DISTRO && \
    mkdir -p $ROS_WS/src

WORKDIR $ROS_WS

# ZED Wrapper
RUN cd src ; git clone --recursive https://github.com/stereolabs/zed-ros-wrapper.git && \
    cd .. ; apt-get update -y && \
    . /opt/ros/$ROS_DISTRO/setup.sh && \
    rosdep install --from-paths $ROS_WS/src --ignore-src -r -y && \ 
    rm -rf /var/lib/apt/lists/* && \
    catkin_make -DCMAKE_BUILD_TYPE=Release -DCMAKE_LIBRARY_PATH=/usr/local/cuda/lib64/stubs -DCUDA_CUDART_LIBRARY=/usr/local/cuda/lib64/stubs -DCMAKE_CXX_FLAGS="-Wl,--allow-shlib-undefined" && \
    cd 

RUN echo "source /opt/zed_ros_ws/devel/setup.bash" >> ~/.bashrc
RUN bash -c "source ~/.bashrc"

# ZED Examples
RUN cd src ; git clone https://github.com/stereolabs/zed-ros-examples.git && \
    cd .. && \
    apt-get update

RUN DEBIAN_FRONTEND=noninteractive rosdep install --from-paths src --ignore-src -r -y ; exit 0

RUN /opt/ros/$ROS_DISTRO/setup.sh && \
    catkin_make -DCMAKE_BUILD_TYPE=Release 
    
RUN echo "source /opt/ros/noetic/setup.bash" >> ~/.bashrc
RUN echo "source /opt/zed_ros_ws/devel/setup.bash" >> ~/.bashrc

# setup entrypoint
# COPY ./ros_entrypoint.sh /

# ENTRYPOINT ["/ros_entrypoint.sh"]

# If your NVIDIA GPU is set to ondemand mode use this to explicitly run on dgpu
RUN export __NV_PRIME_RENDER_OFFLOAD=1 
RUN export __GLX_VENDOR_LIBRARY_NAME=nvidia

#__NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia 

CMD ["bash"]
